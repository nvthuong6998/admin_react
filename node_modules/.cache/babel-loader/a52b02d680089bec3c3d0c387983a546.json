{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback, useEffect, useRef, useState, useMemo, isValidElement } from 'react';\nimport Downshift from 'downshift';\nimport get from 'lodash/get';\nimport classNames from 'classnames';\nimport { TextField, InputAdornment, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { useInput, FieldTitle, useSuggestions, useTranslate, warning } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\n\nvar AutocompleteInput = function AutocompleteInput(props) {\n  var allowEmpty = props.allowEmpty,\n      className = props.className,\n      classesOverride = props.classes,\n      clearAlwaysVisible = props.clearAlwaysVisible,\n      _a = props.choices,\n      choices = _a === void 0 ? [] : _a,\n      disabled = props.disabled,\n      emptyText = props.emptyText,\n      emptyValue = props.emptyValue,\n      format = props.format,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      idOverride = props.id,\n      inputOverride = props.input,\n      isRequiredOverride = props.isRequired,\n      label = props.label,\n      limitChoicesToValue = props.limitChoicesToValue,\n      _b = props.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      matchSuggestion = props.matchSuggestion,\n      metaOverride = props.meta,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      _c = props.options,\n      _d = _c === void 0 ? {\n    suggestionsContainerProps: undefined,\n    labelProps: undefined,\n    InputProps: undefined\n  } : _c,\n      suggestionsContainerProps = _d.suggestionsContainerProps,\n      labelProps = _d.labelProps,\n      InputProps = _d.InputProps,\n      options = __rest(_d, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]),\n      _e = props.optionText,\n      optionText = _e === void 0 ? 'name' : _e,\n      inputText = props.inputText,\n      _f = props.optionValue,\n      optionValue = _f === void 0 ? 'id' : _f,\n      parse = props.parse,\n      resettable = props.resettable,\n      resource = props.resource,\n      setFilter = props.setFilter,\n      shouldRenderSuggestionsOverride = props.shouldRenderSuggestions,\n      source = props.source,\n      suggestionLimit = props.suggestionLimit,\n      _g = props.translateChoice,\n      translateChoice = _g === void 0 ? true : _g,\n      validate = props.validate,\n      _h = props.variant,\n      variant = _h === void 0 ? 'filled' : _h,\n      rest = __rest(props, [\"allowEmpty\", \"className\", \"classes\", \"clearAlwaysVisible\", \"choices\", \"disabled\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"inputText\", \"optionValue\", \"parse\", \"resettable\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  if (isValidElement(optionText) && !inputText) {\n    throw new Error(\"If the optionText prop is a React element, you must also specify the inputText prop:\\n        <AutocompleteInput\\n            inputText={(record) => record.title}\\n        />\");\n  }\n\n  warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n  warning(source === undefined, \"If you're not wrapping the AutocompleteInput inside a ReferenceInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the AutocompleteInput inside a ReferenceInput, you must provide the choices prop\");\n  var classes = useStyles(props);\n  var inputEl = useRef();\n  var anchorEl = useRef();\n  var translate = useTranslate();\n\n  var _j = useInput(__assign({\n    format: format,\n    id: idOverride,\n    input: inputOverride,\n    meta: metaOverride,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _j.id,\n      input = _j.input,\n      isRequired = _j.isRequired,\n      _k = _j.meta,\n      touched = _k.touched,\n      error = _k.error;\n\n  var _l = useState(''),\n      filterValue = _l[0],\n      setFilterValue = _l[1];\n\n  var getSuggestionFromValue = useCallback(function (value) {\n    return choices.find(function (choice) {\n      return get(choice, optionValue) === value;\n    });\n  }, [choices, optionValue]);\n  var selectedItem = useMemo(function () {\n    return getSuggestionFromValue(input.value) || null;\n  }, [input.value, getSuggestionFromValue]);\n\n  var _m = useSuggestions({\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: emptyText,\n    emptyValue: emptyValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItem,\n    suggestionLimit: suggestionLimit,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _m.getChoiceText,\n      getChoiceValue = _m.getChoiceValue,\n      getSuggestions = _m.getSuggestions;\n\n  var handleFilterChange = useCallback(function (eventOrValue) {\n    var event = eventOrValue;\n    var value = event.target ? event.target.value : eventOrValue;\n\n    if (setFilter) {\n      setFilter(value);\n    }\n  }, [setFilter]); // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n\n  useEffect(function () {\n    handleFilterChange(''); // If we have a value, set the filter to its text so that\n    // Downshift displays it correctly\n\n    setFilterValue(typeof input.value === 'undefined' || input.value === null || selectedItem === null ? '' : inputText ? inputText(getChoiceText(selectedItem).props.record) : getChoiceText(selectedItem));\n  }, [input.value, handleFilterChange, selectedItem, getChoiceText, inputText]);\n  var handleChange = useCallback(function (item) {\n    if (getChoiceValue(item) == null && filterValue) {\n      setFilterValue('');\n    }\n\n    input.onChange(getChoiceValue(item));\n  }, [filterValue, getChoiceValue, input]); // This function ensures that the suggestion list stay aligned to the\n  // input element even if it moves (because user scrolled for example)\n\n  var updateAnchorEl = function updateAnchorEl() {\n    if (!inputEl.current) {\n      return;\n    }\n\n    var inputPosition = inputEl.current.getBoundingClientRect(); // It works by implementing a mock element providing the only method used\n    // by the PopOver component, getBoundingClientRect, which will return a\n    // position based on the input position\n\n    if (!anchorEl.current) {\n      anchorEl.current = {\n        getBoundingClientRect: function getBoundingClientRect() {\n          return inputPosition;\n        }\n      };\n    } else {\n      var anchorPosition = anchorEl.current.getBoundingClientRect();\n\n      if (anchorPosition.x !== inputPosition.x || anchorPosition.y !== inputPosition.y) {\n        anchorEl.current = {\n          getBoundingClientRect: function getBoundingClientRect() {\n            return inputPosition;\n          }\n        };\n      }\n    }\n  };\n\n  var storeInputRef = function storeInputRef(input) {\n    inputEl.current = input;\n    updateAnchorEl();\n  };\n\n  var handleBlur = useCallback(function (event) {\n    handleFilterChange(''); // If we had a value before, set the filter back to its text so that\n    // Downshift displays it correctly\n\n    setFilterValue(input.value ? inputText ? inputText(getChoiceText(selectedItem).props.record) : getChoiceText(selectedItem) : '');\n    input.onBlur(event);\n  }, [getChoiceText, handleFilterChange, input, inputText, selectedItem]);\n  var handleFocus = useCallback(function (openMenu) {\n    return function (event) {\n      openMenu(event);\n      input.onFocus(event);\n    };\n  }, [input]);\n\n  var shouldRenderSuggestions = function shouldRenderSuggestions(val) {\n    if (shouldRenderSuggestionsOverride !== undefined && typeof shouldRenderSuggestionsOverride === 'function') {\n      return shouldRenderSuggestionsOverride(val);\n    }\n\n    return true;\n  };\n\n  var _o = InputProps || {},\n      endAdornment = _o.endAdornment,\n      InputPropsWithoutEndAdornment = __rest(_o, [\"endAdornment\"]);\n\n  var handleClickClearButton = useCallback(function (openMenu) {\n    return function (event) {\n      event.stopPropagation();\n      setFilterValue('');\n      input.onChange('');\n      openMenu(event);\n      input.onFocus(event);\n    };\n  }, [input]);\n\n  var getEndAdornment = function getEndAdornment(openMenu) {\n    var _a;\n\n    if (!resettable) {\n      return endAdornment;\n    } else if (!filterValue) {\n      var label_1 = translate('ra.action.clear_input_value');\n\n      if (clearAlwaysVisible) {\n        // show clear button, inactive\n        return React.createElement(InputAdornment, {\n          position: \"end\"\n        }, React.createElement(IconButton, {\n          className: classes.clearButton,\n          \"aria-label\": label_1,\n          title: label_1,\n          disableRipple: true,\n          disabled: true\n        }, React.createElement(ClearIcon, {\n          className: classNames(classes.clearIcon, classes.visibleClearIcon)\n        })));\n      } else {\n        if (endAdornment) {\n          return endAdornment;\n        } else {\n          // show spacer\n          return React.createElement(InputAdornment, {\n            position: \"end\"\n          }, React.createElement(\"span\", {\n            className: classes.clearButton\n          }, \"\\xA0\"));\n        }\n      }\n    } else {\n      // show clear\n      var label_2 = translate('ra.action.clear_input_value');\n      return React.createElement(InputAdornment, {\n        position: \"end\"\n      }, React.createElement(IconButton, {\n        className: classes.clearButton,\n        \"aria-label\": label_2,\n        title: label_2,\n        disableRipple: true,\n        onClick: handleClickClearButton(openMenu),\n        onMouseDown: handleMouseDownClearButton,\n        disabled: disabled\n      }, React.createElement(ClearIcon, {\n        className: classNames(classes.clearIcon, (_a = {}, _a[classes.visibleClearIcon] = clearAlwaysVisible || filterValue, _a))\n      })));\n    }\n  };\n\n  return React.createElement(Downshift, __assign({\n    inputValue: filterValue,\n    onChange: handleChange,\n    selectedItem: selectedItem,\n    itemToString: function itemToString(item) {\n      return getChoiceValue(item);\n    }\n  }, rest), function (_a) {\n    var getInputProps = _a.getInputProps,\n        getItemProps = _a.getItemProps,\n        getLabelProps = _a.getLabelProps,\n        getMenuProps = _a.getMenuProps,\n        isOpen = _a.isOpen,\n        highlightedIndex = _a.highlightedIndex,\n        openMenu = _a.openMenu;\n    var isMenuOpen = isOpen && shouldRenderSuggestions(filterValue);\n\n    var _b = getInputProps(__assign({\n      onBlur: handleBlur,\n      onFocus: handleFocus(openMenu)\n    }, InputProps)),\n        downshiftId = _b.id,\n        // We want to ignore this to correctly link our label and the input\n    value = _b.value,\n        onBlur = _b.onBlur,\n        _onChange = _b.onChange,\n        onFocus = _b.onFocus,\n        ref = _b.ref,\n        size = _b.size,\n        color = _b.color,\n        inputProps = __rest(_b, [\"id\", \"value\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\", \"size\", \"color\"]);\n\n    var suggestions = getSuggestions(filterValue);\n    return React.createElement(\"div\", {\n      className: classes.container\n    }, React.createElement(TextField, __assign({\n      id: id,\n      name: input.name,\n      InputProps: __assign({\n        inputRef: storeInputRef,\n        endAdornment: getEndAdornment(openMenu),\n        onBlur: onBlur,\n        onChange: function onChange(event) {\n          handleFilterChange(event);\n          setFilterValue(event.target.value);\n\n          _onChange(event);\n        },\n        onFocus: onFocus\n      }, InputPropsWithoutEndAdornment),\n      error: !!(touched && error),\n      label: React.createElement(FieldTitle, __assign({\n        label: label\n      }, labelProps, {\n        source: source,\n        resource: resource,\n        isRequired: typeof isRequiredOverride !== 'undefined' ? isRequiredOverride : isRequired\n      })),\n      InputLabelProps: getLabelProps({\n        htmlFor: id\n      }),\n      helperText: React.createElement(InputHelperText, {\n        touched: touched,\n        error: error,\n        helperText: helperText\n      }),\n      disabled: disabled,\n      variant: variant,\n      margin: margin,\n      fullWidth: fullWidth,\n      value: filterValue,\n      className: className,\n      size: size,\n      color: color\n    }, inputProps, options)), React.createElement(AutocompleteSuggestionList, {\n      isOpen: isMenuOpen,\n      menuProps: getMenuProps({}, // https://github.com/downshift-js/downshift/issues/235\n      {\n        suppressRefError: true\n      }),\n      inputEl: inputEl.current,\n      suggestionsContainerProps: suggestionsContainerProps,\n      className: classes.suggestionsContainer\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(AutocompleteSuggestionItem, __assign({\n        key: getChoiceValue(suggestion),\n        suggestion: suggestion,\n        index: index,\n        highlightedIndex: highlightedIndex,\n        isSelected: input.value === getChoiceValue(suggestion),\n        filterValue: filterValue,\n        getSuggestionText: getChoiceText\n      }, getItemProps({\n        item: suggestion\n      })));\n    })));\n  });\n};\n\nvar handleMouseDownClearButton = function handleMouseDownClearButton(event) {\n  event.preventDefault();\n};\n\nvar useStyles = makeStyles({\n  container: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  clearIcon: {\n    height: 16,\n    width: 0\n  },\n  visibleClearIcon: {\n    width: 16\n  },\n  clearButton: {\n    height: 24,\n    width: 24,\n    padding: 0\n  },\n  selectAdornment: {\n    position: 'absolute',\n    right: 24\n  },\n  inputAdornedEnd: {\n    paddingRight: 0\n  },\n  suggestionsContainer: {}\n}, {\n  name: 'RaAutocompleteInput'\n});\nexport default AutocompleteInput;","map":{"version":3,"sources":["F:/TTNM/admin3/node_modules/ra-ui-materialui/esm/input/AutocompleteInput.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useCallback","useEffect","useRef","useState","useMemo","isValidElement","Downshift","get","classNames","TextField","InputAdornment","IconButton","makeStyles","ClearIcon","useInput","FieldTitle","useSuggestions","useTranslate","warning","InputHelperText","AutocompleteSuggestionList","AutocompleteSuggestionItem","AutocompleteInput","props","allowEmpty","className","classesOverride","classes","clearAlwaysVisible","_a","choices","disabled","emptyText","emptyValue","format","fullWidth","helperText","idOverride","id","inputOverride","input","isRequiredOverride","isRequired","label","limitChoicesToValue","_b","margin","matchSuggestion","metaOverride","meta","onBlur","onChange","onFocus","_c","options","_d","suggestionsContainerProps","undefined","labelProps","InputProps","_e","optionText","inputText","_f","optionValue","parse","resettable","resource","setFilter","shouldRenderSuggestionsOverride","shouldRenderSuggestions","source","suggestionLimit","_g","translateChoice","validate","_h","variant","rest","Error","useStyles","inputEl","anchorEl","translate","_j","_k","touched","error","_l","filterValue","setFilterValue","getSuggestionFromValue","value","find","choice","selectedItem","_m","getChoiceText","getChoiceValue","getSuggestions","handleFilterChange","eventOrValue","event","target","record","handleChange","item","updateAnchorEl","current","inputPosition","getBoundingClientRect","anchorPosition","x","y","storeInputRef","handleBlur","handleFocus","openMenu","val","_o","endAdornment","InputPropsWithoutEndAdornment","handleClickClearButton","stopPropagation","getEndAdornment","label_1","createElement","position","clearButton","title","disableRipple","clearIcon","visibleClearIcon","label_2","onClick","onMouseDown","handleMouseDownClearButton","inputValue","itemToString","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","isMenuOpen","downshiftId","ref","size","color","inputProps","suggestions","container","name","inputRef","InputLabelProps","htmlFor","menuProps","suppressRefError","suggestionsContainer","map","suggestion","index","key","isSelected","getSuggestionText","preventDefault","flexGrow","height","width","padding","selectAdornment","right","inputAdornedEnd","paddingRight"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useCallback, useEffect, useRef, useState, useMemo, isValidElement, } from 'react';\nimport Downshift from 'downshift';\nimport get from 'lodash/get';\nimport classNames from 'classnames';\nimport { TextField, InputAdornment, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { useInput, FieldTitle, useSuggestions, useTranslate, warning, } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nvar AutocompleteInput = function (props) {\n    var allowEmpty = props.allowEmpty, className = props.className, classesOverride = props.classes, clearAlwaysVisible = props.clearAlwaysVisible, _a = props.choices, choices = _a === void 0 ? [] : _a, disabled = props.disabled, emptyText = props.emptyText, emptyValue = props.emptyValue, format = props.format, fullWidth = props.fullWidth, helperText = props.helperText, idOverride = props.id, inputOverride = props.input, isRequiredOverride = props.isRequired, label = props.label, limitChoicesToValue = props.limitChoicesToValue, _b = props.margin, margin = _b === void 0 ? 'dense' : _b, matchSuggestion = props.matchSuggestion, metaOverride = props.meta, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, _c = props.options, _d = _c === void 0 ? {\n        suggestionsContainerProps: undefined,\n        labelProps: undefined,\n        InputProps: undefined,\n    } : _c, suggestionsContainerProps = _d.suggestionsContainerProps, labelProps = _d.labelProps, InputProps = _d.InputProps, options = __rest(_d, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]), _e = props.optionText, optionText = _e === void 0 ? 'name' : _e, inputText = props.inputText, _f = props.optionValue, optionValue = _f === void 0 ? 'id' : _f, parse = props.parse, resettable = props.resettable, resource = props.resource, setFilter = props.setFilter, shouldRenderSuggestionsOverride = props.shouldRenderSuggestions, source = props.source, suggestionLimit = props.suggestionLimit, _g = props.translateChoice, translateChoice = _g === void 0 ? true : _g, validate = props.validate, _h = props.variant, variant = _h === void 0 ? 'filled' : _h, rest = __rest(props, [\"allowEmpty\", \"className\", \"classes\", \"clearAlwaysVisible\", \"choices\", \"disabled\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"inputText\", \"optionValue\", \"parse\", \"resettable\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n    if (isValidElement(optionText) && !inputText) {\n        throw new Error(\"If the optionText prop is a React element, you must also specify the inputText prop:\\n        <AutocompleteInput\\n            inputText={(record) => record.title}\\n        />\");\n    }\n    warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n    warning(source === undefined, \"If you're not wrapping the AutocompleteInput inside a ReferenceInput, you must provide the source prop\");\n    warning(choices === undefined, \"If you're not wrapping the AutocompleteInput inside a ReferenceInput, you must provide the choices prop\");\n    var classes = useStyles(props);\n    var inputEl = useRef();\n    var anchorEl = useRef();\n    var translate = useTranslate();\n    var _j = useInput(__assign({ format: format, id: idOverride, input: inputOverride, meta: metaOverride, onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        parse: parse,\n        resource: resource,\n        source: source,\n        validate: validate }, rest)), id = _j.id, input = _j.input, isRequired = _j.isRequired, _k = _j.meta, touched = _k.touched, error = _k.error;\n    var _l = useState(''), filterValue = _l[0], setFilterValue = _l[1];\n    var getSuggestionFromValue = useCallback(function (value) { return choices.find(function (choice) { return get(choice, optionValue) === value; }); }, [choices, optionValue]);\n    var selectedItem = useMemo(function () { return getSuggestionFromValue(input.value) || null; }, [input.value, getSuggestionFromValue]);\n    var _m = useSuggestions({\n        allowEmpty: allowEmpty,\n        choices: choices,\n        emptyText: emptyText,\n        emptyValue: emptyValue,\n        limitChoicesToValue: limitChoicesToValue,\n        matchSuggestion: matchSuggestion,\n        optionText: optionText,\n        optionValue: optionValue,\n        selectedItem: selectedItem,\n        suggestionLimit: suggestionLimit,\n        translateChoice: translateChoice,\n    }), getChoiceText = _m.getChoiceText, getChoiceValue = _m.getChoiceValue, getSuggestions = _m.getSuggestions;\n    var handleFilterChange = useCallback(function (eventOrValue) {\n        var event = eventOrValue;\n        var value = event.target\n            ? event.target.value\n            : eventOrValue;\n        if (setFilter) {\n            setFilter(value);\n        }\n    }, [setFilter]);\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    useEffect(function () {\n        handleFilterChange('');\n        // If we have a value, set the filter to its text so that\n        // Downshift displays it correctly\n        setFilterValue(typeof input.value === 'undefined' ||\n            input.value === null ||\n            selectedItem === null\n            ? ''\n            : inputText\n                ? inputText(getChoiceText(selectedItem).props.record)\n                : getChoiceText(selectedItem));\n    }, [\n        input.value,\n        handleFilterChange,\n        selectedItem,\n        getChoiceText,\n        inputText,\n    ]);\n    var handleChange = useCallback(function (item) {\n        if (getChoiceValue(item) == null && filterValue) {\n            setFilterValue('');\n        }\n        input.onChange(getChoiceValue(item));\n    }, [filterValue, getChoiceValue, input]);\n    // This function ensures that the suggestion list stay aligned to the\n    // input element even if it moves (because user scrolled for example)\n    var updateAnchorEl = function () {\n        if (!inputEl.current) {\n            return;\n        }\n        var inputPosition = inputEl.current.getBoundingClientRect();\n        // It works by implementing a mock element providing the only method used\n        // by the PopOver component, getBoundingClientRect, which will return a\n        // position based on the input position\n        if (!anchorEl.current) {\n            anchorEl.current = { getBoundingClientRect: function () { return inputPosition; } };\n        }\n        else {\n            var anchorPosition = anchorEl.current.getBoundingClientRect();\n            if (anchorPosition.x !== inputPosition.x ||\n                anchorPosition.y !== inputPosition.y) {\n                anchorEl.current = {\n                    getBoundingClientRect: function () { return inputPosition; },\n                };\n            }\n        }\n    };\n    var storeInputRef = function (input) {\n        inputEl.current = input;\n        updateAnchorEl();\n    };\n    var handleBlur = useCallback(function (event) {\n        handleFilterChange('');\n        // If we had a value before, set the filter back to its text so that\n        // Downshift displays it correctly\n        setFilterValue(input.value\n            ? inputText\n                ? inputText(getChoiceText(selectedItem).props.record)\n                : getChoiceText(selectedItem)\n            : '');\n        input.onBlur(event);\n    }, [getChoiceText, handleFilterChange, input, inputText, selectedItem]);\n    var handleFocus = useCallback(function (openMenu) { return function (event) {\n        openMenu(event);\n        input.onFocus(event);\n    }; }, [input]);\n    var shouldRenderSuggestions = function (val) {\n        if (shouldRenderSuggestionsOverride !== undefined &&\n            typeof shouldRenderSuggestionsOverride === 'function') {\n            return shouldRenderSuggestionsOverride(val);\n        }\n        return true;\n    };\n    var _o = InputProps || {}, endAdornment = _o.endAdornment, InputPropsWithoutEndAdornment = __rest(_o, [\"endAdornment\"]);\n    var handleClickClearButton = useCallback(function (openMenu) { return function (event) {\n        event.stopPropagation();\n        setFilterValue('');\n        input.onChange('');\n        openMenu(event);\n        input.onFocus(event);\n    }; }, [input]);\n    var getEndAdornment = function (openMenu) {\n        var _a;\n        if (!resettable) {\n            return endAdornment;\n        }\n        else if (!filterValue) {\n            var label_1 = translate('ra.action.clear_input_value');\n            if (clearAlwaysVisible) {\n                // show clear button, inactive\n                return (React.createElement(InputAdornment, { position: \"end\" },\n                    React.createElement(IconButton, { className: classes.clearButton, \"aria-label\": label_1, title: label_1, disableRipple: true, disabled: true },\n                        React.createElement(ClearIcon, { className: classNames(classes.clearIcon, classes.visibleClearIcon) }))));\n            }\n            else {\n                if (endAdornment) {\n                    return endAdornment;\n                }\n                else {\n                    // show spacer\n                    return (React.createElement(InputAdornment, { position: \"end\" },\n                        React.createElement(\"span\", { className: classes.clearButton }, \"\\u00A0\")));\n                }\n            }\n        }\n        else {\n            // show clear\n            var label_2 = translate('ra.action.clear_input_value');\n            return (React.createElement(InputAdornment, { position: \"end\" },\n                React.createElement(IconButton, { className: classes.clearButton, \"aria-label\": label_2, title: label_2, disableRipple: true, onClick: handleClickClearButton(openMenu), onMouseDown: handleMouseDownClearButton, disabled: disabled },\n                    React.createElement(ClearIcon, { className: classNames(classes.clearIcon, (_a = {},\n                            _a[classes.visibleClearIcon] = clearAlwaysVisible || filterValue,\n                            _a)) }))));\n        }\n    };\n    return (React.createElement(Downshift, __assign({ inputValue: filterValue, onChange: handleChange, selectedItem: selectedItem, itemToString: function (item) { return getChoiceValue(item); } }, rest), function (_a) {\n        var getInputProps = _a.getInputProps, getItemProps = _a.getItemProps, getLabelProps = _a.getLabelProps, getMenuProps = _a.getMenuProps, isOpen = _a.isOpen, highlightedIndex = _a.highlightedIndex, openMenu = _a.openMenu;\n        var isMenuOpen = isOpen && shouldRenderSuggestions(filterValue);\n        var _b = getInputProps(__assign({ onBlur: handleBlur, onFocus: handleFocus(openMenu) }, InputProps)), downshiftId = _b.id, // We want to ignore this to correctly link our label and the input\n        value = _b.value, onBlur = _b.onBlur, onChange = _b.onChange, onFocus = _b.onFocus, ref = _b.ref, size = _b.size, color = _b.color, inputProps = __rest(_b, [\"id\", \"value\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\", \"size\", \"color\"]);\n        var suggestions = getSuggestions(filterValue);\n        return (React.createElement(\"div\", { className: classes.container },\n            React.createElement(TextField, __assign({ id: id, name: input.name, InputProps: __assign({ inputRef: storeInputRef, endAdornment: getEndAdornment(openMenu), onBlur: onBlur, onChange: function (event) {\n                        handleFilterChange(event);\n                        setFilterValue(event.target.value);\n                        onChange(event);\n                    }, onFocus: onFocus }, InputPropsWithoutEndAdornment), error: !!(touched && error), label: React.createElement(FieldTitle, __assign({ label: label }, labelProps, { source: source, resource: resource, isRequired: typeof isRequiredOverride !==\n                        'undefined'\n                        ? isRequiredOverride\n                        : isRequired })), InputLabelProps: getLabelProps({\n                    htmlFor: id,\n                }), helperText: React.createElement(InputHelperText, { touched: touched, error: error, helperText: helperText }), disabled: disabled, variant: variant, margin: margin, fullWidth: fullWidth, value: filterValue, className: className, size: size, color: color }, inputProps, options)),\n            React.createElement(AutocompleteSuggestionList, { isOpen: isMenuOpen, menuProps: getMenuProps({}, \n                // https://github.com/downshift-js/downshift/issues/235\n                { suppressRefError: true }), inputEl: inputEl.current, suggestionsContainerProps: suggestionsContainerProps, className: classes.suggestionsContainer }, suggestions.map(function (suggestion, index) { return (React.createElement(AutocompleteSuggestionItem, __assign({ key: getChoiceValue(suggestion), suggestion: suggestion, index: index, highlightedIndex: highlightedIndex, isSelected: input.value ===\n                    getChoiceValue(suggestion), filterValue: filterValue, getSuggestionText: getChoiceText }, getItemProps({\n                item: suggestion,\n            })))); }))));\n    }));\n};\nvar handleMouseDownClearButton = function (event) {\n    event.preventDefault();\n};\nvar useStyles = makeStyles({\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    clearIcon: {\n        height: 16,\n        width: 0,\n    },\n    visibleClearIcon: {\n        width: 16,\n    },\n    clearButton: {\n        height: 24,\n        width: 24,\n        padding: 0,\n    },\n    selectAdornment: {\n        position: 'absolute',\n        right: 24,\n    },\n    inputAdornedEnd: {\n        paddingRight: 0,\n    },\n    suggestionsContainer: {},\n}, { name: 'RaAutocompleteInput' });\nexport default AutocompleteInput;\n"]},"metadata":{},"sourceType":"module"}