{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { useGetMany } from '../../dataProvider';\nimport useGetMatching from '../../dataProvider/useGetMatching';\nimport { useTranslate } from '../../i18n';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport { useResourceContext } from '../../core';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { choices, error, loaded, loading } = useReferenceArrayInputController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {string} props.basePath basepath to current resource\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\n\nvar useReferenceArrayInputController = function useReferenceArrayInputController(props) {\n  var defaultFilter = props.filter,\n      _a = props.filterToQuery,\n      filterToQuery = _a === void 0 ? defaultFilterToQuery : _a,\n      input = props.input,\n      _b = props.perPage,\n      perPage = _b === void 0 ? 25 : _b,\n      _c = props.sort,\n      defaultSort = _c === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _c,\n      options = props.options,\n      reference = props.reference,\n      source = props.source;\n  var resource = useResourceContext(props);\n  var translate = useTranslate(); // We store the current input value in a ref so that we are able to fetch\n  // only the missing references when the input value changes\n\n  var inputValue = useRef(input.value);\n\n  var _d = useState(input.value),\n      idsToFetch = _d[0],\n      setIdsToFetch = _d[1];\n\n  var _e = useState([]),\n      idsToGetFromStore = _e[0],\n      setIdsToGetFromStore = _e[1];\n\n  var referenceRecordsFromStore = useSelector(function (state) {\n    return idsToGetFromStore.map(function (id) {\n      return state.admin.resources[reference].data[id];\n    });\n  }); // optimization: we fetch selected items only once. When the user selects more items,\n  // as we already have the past selected items in the store, we don't fetch them.\n\n  useEffect(function () {\n    // Only fetch new ids\n    var newIdsToFetch = difference(input.value, inputValue.current); // Only get from store ids selected and already fetched\n\n    var newIdsToGetFromStore = difference(input.value, newIdsToFetch);\n    /*\n        input.value (current)\n            +------------------------+\n            | ********************** |\n            | ********************** |  inputValue.current (old)\n            | ********** +-----------------------+\n            | ********** | ooooooooo |           |\n            | ********** | ooooooooo |           |\n            | ********** | ooooooooo |           |\n            | ********** | ooooooooo |           |\n            +---|--------|------|----+           |\n                |        |      |                |\n                |        |      |                |\n                |        +------|----------------+\n                |               |\n        newIdsToFetch    newIdsToGetFromStore\n    */\n    // Change states each time input values changes to avoid keeping previous values no more selected\n\n    if (!isEqual(idsToFetch, newIdsToFetch)) {\n      setIdsToFetch(newIdsToFetch);\n    }\n\n    if (!isEqual(idsToGetFromStore, newIdsToGetFromStore)) {\n      setIdsToGetFromStore(newIdsToGetFromStore);\n    }\n\n    inputValue.current = input.value;\n  }, [idsToFetch, idsToGetFromStore, input.value, setIdsToFetch, setIdsToGetFromStore]);\n\n  var _f = useState({\n    page: 1,\n    perPage: perPage\n  }),\n      pagination = _f[0],\n      setPagination = _f[1];\n\n  var _g = useState(defaultSort),\n      sort = _g[0],\n      setSort = _g[1];\n\n  var _h = useState(''),\n      filter = _h[0],\n      setFilter = _h[1]; // Ensure sort can be updated through props too, not just by using the setSort function\n\n\n  useEffect(function () {\n    if (!isEqual(defaultSort, sort)) {\n      setSort(defaultSort);\n    }\n  }, [setSort, defaultSort, sort]); // Ensure pagination can be updated through props too, not just by using the setPagination function\n\n  useEffect(function () {\n    var newPagination = {\n      page: 1,\n      perPage: perPage\n    };\n\n    if (!isEqual(newPagination, pagination)) {\n      setPagination(newPagination);\n    }\n  }, [setPagination, perPage, pagination]); // Merge the user filters with the default ones\n\n  var finalFilter = useMemo(function () {\n    return __assign(__assign({}, defaultFilter), filterToQuery(filter));\n  }, [defaultFilter, filter, filterToQuery]);\n\n  var _j = useGetMany(reference, idsToFetch || []),\n      referenceRecordsFetched = _j.data,\n      loaded = _j.loaded;\n\n  var referenceRecords = referenceRecordsFetched ? referenceRecordsFetched.concat(referenceRecordsFromStore) : referenceRecordsFromStore; // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n\n  var finalReferenceRecords = referenceRecords.filter(Boolean);\n  var matchingReferences = useGetMatching(reference, pagination, sort, finalFilter, source, resource, options).data; // We merge the currently selected records with the matching ones, otherwise\n  // the component displaying the currently selected records may fail\n\n  var finalMatchingReferences = matchingReferences && matchingReferences.length > 0 ? mergeReferences(matchingReferences, finalReferenceRecords) : finalReferenceRecords.length > 0 ? finalReferenceRecords : matchingReferences;\n  var dataStatus = getDataStatus({\n    input: input,\n    matchingReferences: finalMatchingReferences,\n    referenceRecords: finalReferenceRecords,\n    translate: translate\n  });\n  return {\n    choices: dataStatus.choices,\n    error: dataStatus.error,\n    loaded: loaded,\n    loading: dataStatus.waiting,\n    setFilter: setFilter,\n    setPagination: setPagination,\n    setSort: setSort,\n    warning: dataStatus.warning\n  };\n}; // concatenate and deduplicate two lists of records\n\n\nvar mergeReferences = function mergeReferences(ref1, ref2) {\n  var res = __spreadArrays(ref1);\n\n  var ids = ref1.map(function (ref) {\n    return ref.id;\n  });\n  ref2.forEach(function (ref) {\n    if (!ids.includes(ref.id)) {\n      ids.push(ref.id);\n      res.push(ref);\n    }\n  });\n  return res;\n};\n\nexport default useReferenceArrayInputController;\n\nvar defaultFilterToQuery = function defaultFilterToQuery(searchText) {\n  return {\n    q: searchText\n  };\n};","map":{"version":3,"sources":["F:/TTNM/admin3/node_modules/ra-core/esm/controller/input/useReferenceArrayInputController.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","Array","k","a","j","jl","useMemo","useState","useEffect","useRef","useSelector","isEqual","difference","useGetMany","useGetMatching","useTranslate","getStatusForArrayInput","getDataStatus","useResourceContext","useReferenceArrayInputController","props","defaultFilter","filter","_a","filterToQuery","defaultFilterToQuery","input","_b","perPage","_c","sort","defaultSort","field","order","options","reference","source","resource","translate","inputValue","value","_d","idsToFetch","setIdsToFetch","_e","idsToGetFromStore","setIdsToGetFromStore","referenceRecordsFromStore","state","map","id","admin","resources","data","newIdsToFetch","current","newIdsToGetFromStore","_f","page","pagination","setPagination","_g","setSort","_h","setFilter","newPagination","finalFilter","_j","referenceRecordsFetched","loaded","referenceRecords","concat","finalReferenceRecords","Boolean","matchingReferences","finalMatchingReferences","mergeReferences","dataStatus","choices","error","loading","waiting","warning","ref1","ref2","res","ids","ref","forEach","includes","push","searchText","q"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { useGetMany } from '../../dataProvider';\nimport useGetMatching from '../../dataProvider/useGetMatching';\nimport { useTranslate } from '../../i18n';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport { useResourceContext } from '../../core';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { choices, error, loaded, loading } = useReferenceArrayInputController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {string} props.basePath basepath to current resource\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\nvar useReferenceArrayInputController = function (props) {\n    var defaultFilter = props.filter, _a = props.filterToQuery, filterToQuery = _a === void 0 ? defaultFilterToQuery : _a, input = props.input, _b = props.perPage, perPage = _b === void 0 ? 25 : _b, _c = props.sort, defaultSort = _c === void 0 ? { field: 'id', order: 'DESC' } : _c, options = props.options, reference = props.reference, source = props.source;\n    var resource = useResourceContext(props);\n    var translate = useTranslate();\n    // We store the current input value in a ref so that we are able to fetch\n    // only the missing references when the input value changes\n    var inputValue = useRef(input.value);\n    var _d = useState(input.value), idsToFetch = _d[0], setIdsToFetch = _d[1];\n    var _e = useState([]), idsToGetFromStore = _e[0], setIdsToGetFromStore = _e[1];\n    var referenceRecordsFromStore = useSelector(function (state) {\n        return idsToGetFromStore.map(function (id) { return state.admin.resources[reference].data[id]; });\n    });\n    // optimization: we fetch selected items only once. When the user selects more items,\n    // as we already have the past selected items in the store, we don't fetch them.\n    useEffect(function () {\n        // Only fetch new ids\n        var newIdsToFetch = difference(input.value, inputValue.current);\n        // Only get from store ids selected and already fetched\n        var newIdsToGetFromStore = difference(input.value, newIdsToFetch);\n        /*\n            input.value (current)\n                +------------------------+\n                | ********************** |\n                | ********************** |  inputValue.current (old)\n                | ********** +-----------------------+\n                | ********** | ooooooooo |           |\n                | ********** | ooooooooo |           |\n                | ********** | ooooooooo |           |\n                | ********** | ooooooooo |           |\n                +---|--------|------|----+           |\n                    |        |      |                |\n                    |        |      |                |\n                    |        +------|----------------+\n                    |               |\n            newIdsToFetch    newIdsToGetFromStore\n        */\n        // Change states each time input values changes to avoid keeping previous values no more selected\n        if (!isEqual(idsToFetch, newIdsToFetch)) {\n            setIdsToFetch(newIdsToFetch);\n        }\n        if (!isEqual(idsToGetFromStore, newIdsToGetFromStore)) {\n            setIdsToGetFromStore(newIdsToGetFromStore);\n        }\n        inputValue.current = input.value;\n    }, [\n        idsToFetch,\n        idsToGetFromStore,\n        input.value,\n        setIdsToFetch,\n        setIdsToGetFromStore,\n    ]);\n    var _f = useState({ page: 1, perPage: perPage }), pagination = _f[0], setPagination = _f[1];\n    var _g = useState(defaultSort), sort = _g[0], setSort = _g[1];\n    var _h = useState(''), filter = _h[0], setFilter = _h[1];\n    // Ensure sort can be updated through props too, not just by using the setSort function\n    useEffect(function () {\n        if (!isEqual(defaultSort, sort)) {\n            setSort(defaultSort);\n        }\n    }, [setSort, defaultSort, sort]);\n    // Ensure pagination can be updated through props too, not just by using the setPagination function\n    useEffect(function () {\n        var newPagination = {\n            page: 1,\n            perPage: perPage,\n        };\n        if (!isEqual(newPagination, pagination)) {\n            setPagination(newPagination);\n        }\n    }, [setPagination, perPage, pagination]);\n    // Merge the user filters with the default ones\n    var finalFilter = useMemo(function () { return (__assign(__assign({}, defaultFilter), filterToQuery(filter))); }, [defaultFilter, filter, filterToQuery]);\n    var _j = useGetMany(reference, idsToFetch || []), referenceRecordsFetched = _j.data, loaded = _j.loaded;\n    var referenceRecords = referenceRecordsFetched\n        ? referenceRecordsFetched.concat(referenceRecordsFromStore)\n        : referenceRecordsFromStore;\n    // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n    var finalReferenceRecords = referenceRecords.filter(Boolean);\n    var matchingReferences = useGetMatching(reference, pagination, sort, finalFilter, source, resource, options).data;\n    // We merge the currently selected records with the matching ones, otherwise\n    // the component displaying the currently selected records may fail\n    var finalMatchingReferences = matchingReferences && matchingReferences.length > 0\n        ? mergeReferences(matchingReferences, finalReferenceRecords)\n        : finalReferenceRecords.length > 0\n            ? finalReferenceRecords\n            : matchingReferences;\n    var dataStatus = getDataStatus({\n        input: input,\n        matchingReferences: finalMatchingReferences,\n        referenceRecords: finalReferenceRecords,\n        translate: translate,\n    });\n    return {\n        choices: dataStatus.choices,\n        error: dataStatus.error,\n        loaded: loaded,\n        loading: dataStatus.waiting,\n        setFilter: setFilter,\n        setPagination: setPagination,\n        setSort: setSort,\n        warning: dataStatus.warning,\n    };\n};\n// concatenate and deduplicate two lists of records\nvar mergeReferences = function (ref1, ref2) {\n    var res = __spreadArrays(ref1);\n    var ids = ref1.map(function (ref) { return ref.id; });\n    ref2.forEach(function (ref) {\n        if (!ids.includes(ref.id)) {\n            ids.push(ref.id);\n            res.push(ref);\n        }\n    });\n    return res;\n};\nexport default useReferenceArrayInputController;\nvar defaultFilterToQuery = function (searchText) { return ({ q: searchText }); };\n"]},"metadata":{},"sourceType":"module"}