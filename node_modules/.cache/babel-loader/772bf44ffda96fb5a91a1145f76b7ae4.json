{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the current record.\n *\n * Use the useRecordContext() hook to read the context. That's what the Edit and Show components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContext } from 'ra-core';\n *\n * const Edit = props => {\n *     const { record }= useEditController(props);\n *     return (\n *         <RecordContextProvider value={record}>\n *             ...\n *         </RecordContextProvider>\n *     );\n * };\n */\n\nexport var RecordContext = createContext(undefined);\nexport var RecordContextProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(RecordContext.Provider, {\n    value: value\n  }, children);\n};\nRecordContext.displayName = 'RecordContext';\nexport var usePickRecordContext = function (context) {\n  var value = useMemo(function () {\n    return pick(context, ['record']);\n  }, [context.record]); // eslint-disable-line\n\n  return value;\n};\n/**\n * Hook to read the record from a RecordContext.\n *\n * Must be used within a <RecordContext> such as provided by the <EditContextProvider>\n * (e.g. as a descendent of <Edit> or <EditBase>) or within a <ShowContextProvider>\n * (e.g. as a descendent of <Show> or <ShowBase>)\n *\n * @returns {Record} The record context\n */\n\nexport var useRecordContext = function (props) {\n  // Can't find a way to specify the RecordType when CreateContext is declared\n  // @ts-ignore\n  var context = useContext(RecordContext);\n\n  if (!context) {\n    // As the record could very well be undefined because not yet loaded\n    // We don't display a deprecation warning yet\n    // @deprecated - to be removed in 4.0\n    return props;\n  }\n\n  return context;\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TTNM/admin3/node_modules/ra-core/esm/controller/RecordContext.js"],"names":["React","createContext","useContext","useMemo","pick","RecordContext","undefined","RecordContextProvider","_a","children","value","createElement","Provider","displayName","usePickRecordContext","context","record","useRecordContext","props"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,QAAmD,OAAnD;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAGJ,aAAa,CAACK,SAAD,CAAjC;AACP,OAAO,IAAIC,qBAAqB,GAAG,UAAUC,EAAV,EAAc;AAC7C,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQV,KAAK,CAACW,aAAN,CAAoBN,aAAa,CAACO,QAAlC,EAA4C;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAA5C,EAA8DD,QAA9D,CAAR;AACH,CAHM;AAIPJ,aAAa,CAACQ,WAAd,GAA4B,eAA5B;AACA,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,OAAV,EAAmB;AACjD,MAAIL,KAAK,GAAGP,OAAO,CAAC,YAAY;AAAE,WAAOC,IAAI,CAACW,OAAD,EAAU,CAAC,QAAD,CAAV,CAAX;AAAmC,GAAlD,EAAoD,CAACA,OAAO,CAACC,MAAT,CAApD,CAAnB,CADiD,CACyC;;AAC1F,SAAON,KAAP;AACH,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIO,gBAAgB,GAAG,UAAUC,KAAV,EAAiB;AAC3C;AACA;AACA,MAAIH,OAAO,GAAGb,UAAU,CAACG,aAAD,CAAxB;;AACA,MAAI,CAACU,OAAL,EAAc;AACV;AACA;AACA;AACA,WAAOG,KAAP;AACH;;AACD,SAAOH,OAAP;AACH,CAXM","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the current record.\n *\n * Use the useRecordContext() hook to read the context. That's what the Edit and Show components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContext } from 'ra-core';\n *\n * const Edit = props => {\n *     const { record }= useEditController(props);\n *     return (\n *         <RecordContextProvider value={record}>\n *             ...\n *         </RecordContextProvider>\n *     );\n * };\n */\nexport var RecordContext = createContext(undefined);\nexport var RecordContextProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(RecordContext.Provider, { value: value }, children));\n};\nRecordContext.displayName = 'RecordContext';\nexport var usePickRecordContext = function (context) {\n    var value = useMemo(function () { return pick(context, ['record']); }, [context.record]); // eslint-disable-line\n    return value;\n};\n/**\n * Hook to read the record from a RecordContext.\n *\n * Must be used within a <RecordContext> such as provided by the <EditContextProvider>\n * (e.g. as a descendent of <Edit> or <EditBase>) or within a <ShowContextProvider>\n * (e.g. as a descendent of <Show> or <ShowBase>)\n *\n * @returns {Record} The record context\n */\nexport var useRecordContext = function (props) {\n    // Can't find a way to specify the RecordType when CreateContext is declared\n    // @ts-ignore\n    var context = useContext(RecordContext);\n    if (!context) {\n        // As the record could very well be undefined because not yet loaded\n        // We don't display a deprecation warning yet\n        // @deprecated - to be removed in 4.0\n        return props;\n    }\n    return context;\n};\n"]},"metadata":{},"sourceType":"module"}